--一个代码块(block)是一个控制结构的主体，或是一个函数的主体，或是一个代码段
--即变量被声明时所在的文件或字符串
x=10
local i=1 --对于代码段来说是局部的
while i<=x do
 local x=i*2
 print(x)
 i=i+1
end
if i>=0 then
	local x
	x=20
	print(x+2)
else
	print(x)
end
print(x)
--当需要更好地控制某些局部变量的生效范围时，do程序块也同样有用
local x1,x2
do
	local a2=2*a
	local d=(b^2-4*a*c)^(1/2)
	x1=(-b+d)/a2
	x2=(-b-d)/a2
end --a2 和 d范围在此结束
print(x1,x2)--x1和x2仍在范围内
--局部变量会随着作用域的结束而消失，从而使得垃圾收集器能够将其释放
--Lua语言的发行版中有一个用于全局变量检查的strict.Lua
--如果试图在一个函数中对不存在的全局变量赋值或者使用不存在的全局变量
--将会抛出异常
--局部变量的声明可以包含初始值，其赋值规则与常见的多重赋值一样 多余的值被丢弃
--多余的变量被赋值为nil 如果一个声明中没有赋值，则变量会被初始化为nil
local a,b=1,10
if a<b then
print(a)
local a
print(a)
end
print(a,b)
--有些人认为在代码块的中间位置声明变量是一个不好的习惯，实际上恰恰相反
--我们很少会在不赋初值的情况下声明变量，在需要时才声明变量可以避免漏掉初始化这个变量
--此外 通过缩小变量的作用域还有助于提高代码的可读性
