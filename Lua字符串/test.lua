--字符串
--Lua语言中的字符是不可变值(immutable value)
--我们不能像在C语言中那样直接改变某个字符串中的某个字符
--但是我们可以通过创建一个新字符串的方式来达到修改的目的
--a="one string"
--b=string.gsub(a,"one","another")--改变字符串中的某些部分
--像lua语言中的其他对象一样 表函数等
--lua语言中的字符串也是自动内存管理对象之一
--这意味着lua语言会负责字符串的分配和释放 开发人员无须关注
--可以使用长度操作符length operator #来获取字符串的长度
--a="hello"
--print(#a)
--print(#"good bye")
--我们可以使用连接操作符 ..两个点来进行字符串连接 如果
--操作数中存在数值 那么Lua语言会先把数值转换成字符串
--"Hello ".."World"
--"result is "..3
--在某些语言中 字符串连接使用的是加号 但世界上3+5和3..5是不一样的
--应该注意，在lua语言中，字符串是不可变量 字符串连接总是创建一个新字符串
--而不会改变原来作为操作数的字符串
--a="Hello"
--a.." World"
--a
--我们可以使用一堆双引号或单引号来声明字符串常量(literal string)
--a="a line"
--b='another line'
--使用双引号和单引号声明字符串是等价的 它们两者唯一的区别在于
--使用双引号声明的字符串中出现单引号时 单引号可以不用转义
--使用单引号声明的字符串中出现双引号时，双引号可以不用转义
--从代码风格上看，大多数程序员会选择使用相同的方式来声明同一类字符串
--至于同一类究竟具体指什么则是依赖于具体实现的比如 由于xml文本中一般都会
--有双引号 所以一个操作xml的库可能就会使用单引号来声明xml片段
--lua语言中的字符串支持下列C语言峰哥的转义字符
--\a
--\b
--\f
--\n
--\r
--\t
--\v
--\\
--\"
--\'
--print("one line\nnext line\n\"in quotes\",'in quotes'")
--print('a backslash inside quotes:\'\\\'')
--print("a simpler way:'\\'")
--在字符串中，还可以通过转义序列\ddd和\xhh来声明字符 ddd是由最多3个十进制数字组成的序列
--hh是由两个十六进制数字组成的序列 举一个稍微有点刻意的例子 在一个使用ascii编码的系统中
--"AL0\n123\""和'\x41L0\10\04923"'实际上是一样的 0x41十进制的65在ASCII编码中对应A　10对应
--换行符，49对应数字1(在这个例子中由于转义序列之后紧跟了其他的数字所以49必须写成\049即用0来补足)
--三位数字，否则lua语言会错误地将其解析为\492 我们还可以把上述字符串写成 即使用十六禁止来表示字符串中的每一个字符
print("\u{3b1}")
