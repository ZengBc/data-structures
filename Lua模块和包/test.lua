--从用户观点来看，一个模块(module)就是一些代码(要么是Lua语言编写的 要么是C语言编写的)
--这些代码可以通过函数require加载，然后创建和返回一个表。这个表就像是某种命名空间
--其中定义的内容是模块中导出的东西，比如函数和常量
--例如所有的标准库都是模块，我们可以按照如下的方法使用数学库
local m=require "math"
print(m.sin(3.14))
--独立解释器会使用跟如下代码等价的方式提前加载所有标准库
--math=require "math"
--string=require "string"
--这种提前加载使得我们可以不用费劲地编写代码来加载模块math就可以直接使用函数math.sin
--使用表来实现模块地显著优点之一是，让我们可以向操作普通表那样操作模块，并且利用Lua语言
--的所有功能实现额外的功能。在大多数语言中，模块不是第一类值(即它们不能被保存在变量中
--也不能被当作参数传递给函数等)
--所以那些语言需要为模块实现一套专门的机制 而在Lua语言中 我们则可以轻易地实现这些功能
--例如 用户调用模块中的函数就有几种方法 其中常见的方法是
local mod=require "mod"
mod.foo()
--用户可以为模块设置一个局部名称
local m=require "mod"
m.foo()
--也可以为个别函数提供不同的名称
local m=require "mod"
local f=m.foo
f()
--也可以只引入特定的函数
local f=require "mod".foo
f()

