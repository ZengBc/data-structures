--表索引
--同一个表中存储的值可以具有不同的类型索引，并可以按需增长以容纳新的元素
a={}--空的表
--创建1000个新元素
for i=1,1000 do
	a[i]=i*2
end
print(a[9])
a["x"]=10
print(a["x"])
print(a["y"])
-- 如同全局变量一样，未经初始化的表元素为nil
-- 将nil赋值给表元素可以将其删除
--这并非巧合，因为Lua语言实际上就是使用表来存储全局变量的
--当把表当作结构体使用时，可以把索引当作成员名称使用
--a.name等价于a["name"]
--因此，可以使用这种更加易读的方式改写前述示例的最后几行
a={}--空白表
a.x=10--等价于a["x"]=10
print(a.x) -->10 等价于a["x"]
print(a.y) -->nil 等价于a["y"]

a={}
x="y"
a[x]=10
print(a[x])
print(a.x)
print(a.y)
--当不能确定表索引的真实数据类型时，可以使用显式的类型转换：
i=10
j="10"
k="+10"
a={}
a[i]="number key"
a[j]="string key"
a[k]="another key"
print(a[i])
print(a[j])
print(a[k])
print(a[tonumber(j)])
print(a[tonumber(k)])
--整型和浮点型类型的表索引则不存在上述问题
--更准确地说，当被用作索引时，任何能够被转换为整型的浮点数都会被转换成整数
a={}
a[2.0]=10
a[2.1]=20
print(a[2])
print(a[2.1])
-- 相反，不能被转换为整型数的浮点数则不会发生上述的类型转换
