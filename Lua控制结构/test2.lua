--for语句有两种形式 数值型(numerical) for 和泛型(generic)for
--数值型for的语法如下
for var=exp1,exp2,exp3 do
 something
end
--在这种循环中，var的值从exp1变化到exp2 之前的每次循环会执行something 并在每次循环结束后将步长(step)
--exp3增加到var上 第三个表达式是可选的，若不存在，lua语言会默认步长值为1如果不想给循环设置上限 可以使用常量math.huge
for i=1,math.huge do
 if(0.3*i^3-20*i^2-500>=0) then
	print(i)
	break
 end
end
--为了更好地使用for循环，还需要了解一些细节。首先，在循环开始前，三个表达式都会运行一次
--控制变量是被For语句自动生命的局部变量，且其作用范围仅限于循环体内。一种典型的错误是认为控制变量在循环结束后仍然存在
for i=1,10 do print(i) end
max=i--此处i是全局的
--如果需要在循环结束后使用控制变量的值(通常在中断循环时),则必须将控制变量的值保存到另一个变量中
--在一个列表中寻找一个值
local found=nil
for i=1,#a do
 if a[i]<0 then
	found=i --保存i的值
	break
 end
end
print(found)
--不要改变控制变量的值，随意改变控制变量的值可能产生不可预知的结果，如果要在循环正常结束前停止for循环
--那么可以参考上面的例子，使用break语句
--泛型for遍历迭代函数所有的返回值，例如我们已经在很多实例中看到过的pairs,ipairs 和io.lines 等
--虽然泛型for看似简单，但它的功能非常强大。使用恰当的迭代器可以在保证代码可读性的情况下遍历几乎所有的数据结构
--当然我们也可以自己编写迭代器。尽管泛型for的使用很简单，但编写迭代函数却有不少细节需要注意
--与数值型for不同，泛型for可以使用多个变量，这些变量在每次循环中都会更新当第一个变量变为nil时，循环终止
--像数值型for一样控制变量是循环体中的局部变量，我们也不应该在循环中改变其值
